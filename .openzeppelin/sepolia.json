{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x25560bD4FD693922450D99188Fab23472e59015F",
      "txHash": "0x57703e5a6b52a42db351a183aee2843aeef7ac6dfc4c6cc8b2dc6bf11e9077b1",
      "kind": "uups"
    },
    {
      "address": "0x6cAEfA7446E967018330cCeC5BA7A43956a45137",
      "txHash": "0x1ed873dbcfdfb4678ea50209b425d12a269f6c04884da17a7f6df4518417f3e2",
      "kind": "uups"
    },
    {
      "address": "0x5816CEDff9DE7c5FB13dcFb1cE9038014b929b7E",
      "txHash": "0x8195c91ae7eae9d353ce476e32c8178c19b138bf2ccc8ef06fadccdd2e5785d0",
      "kind": "uups"
    },
    {
      "address": "0xad36dB955A0C881A78842eE1C8e848a7238637e8",
      "txHash": "0xe96c748acd4c0e517a73e0363d5b463466217fbf155b1040e063d97d1212f150",
      "kind": "uups"
    }
  ],
  "impls": {
    "3245470658646cc5044d2531c84cee9a99cb0162bfb49804d20fa2ed71b9361d": {
      "address": "0xbccB8DdDBbDe67Eb258C032d7A7A069780596101",
      "txHash": "0x77263096f616dca657f5e919355b671b5c4533dc8036926659e01624bc179a3b",
      "layout": {
        "solcVersion": "0.8.28",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(EIP712Storage)724_storage": {
            "label": "struct EIP712Upgradeable.EIP712Storage",
            "members": [
              {
                "label": "_hashedName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_version",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)272_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)128_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(NoncesStorage)543_storage": {
            "label": "struct NoncesUpgradeable.NoncesStorage",
            "members": [
              {
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)13_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)68_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\Ownable2StepUpgradeable.sol:29",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\NoncesUpgradeable.sol:17",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:39",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:41",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:43",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      },
      "allAddresses": [
        "0xbccB8DdDBbDe67Eb258C032d7A7A069780596101"
      ]
    },
    "85d94d1a31fe5f78b72274c29ba552413900bcba01b5fcbb5720010a4103b0fa": {
      "address": "0xc9b38906c87b5C8B5f76EAdbD2FBbd459A290e85",
      "txHash": "0x17f2f884c5a2d610ff148002ccc6dddca1f5c4a077e1c0e24e949718457d839f",
      "layout": {
        "solcVersion": "0.8.30",
        "storage": [
          {
            "label": "isAuthor",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:57"
          },
          {
            "label": "authorIsActive",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:58"
          },
          {
            "label": "t1AddressToId",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:59"
          },
          {
            "label": "t2PubKeyToId",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:60"
          },
          {
            "label": "idToT1Address",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:61"
          },
          {
            "label": "idToT2PubKey",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:62"
          },
          {
            "label": "isPublishedRootHash",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:63"
          },
          {
            "label": "isUsedT2TxId",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:64"
          },
          {
            "label": "hasLowered",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:65"
          },
          {
            "label": "numActiveAuthors",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:66"
          },
          {
            "label": "nextAuthorId",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:67"
          },
          {
            "label": "truth",
            "offset": 0,
            "slot": "11",
            "type": "t_address",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:68"
          },
          {
            "label": "relayerBalance",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_int256)",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:71"
          },
          {
            "label": "_unused",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruthBridge",
            "src": "contracts\\TruthBridge.sol:73",
            "renamedFrom": "onRampGas"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)146_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)14_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)74_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)677_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)753_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_int256)": {
            "label": "mapping(address => int256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\Ownable2StepUpgradeable.sol:29",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      },
      "allAddresses": [
        "0xc9b38906c87b5C8B5f76EAdbD2FBbd459A290e85"
      ]
    }
  }
}
